{"/creational-patterns":{"title":"Creational Patterns","data":{"":"Creational patterns are the way of creating objects, which increase flexibility and reuse of existing code.","types-of-creational-patterns#Types of Creational Patterns":"Simple Factory\nFactory Method\nAbstract Factory\nBuilder\nPrototype\nSingleton"}},"/":{"title":"Introduction","data":{"":"Design patterns are proven solutions to tackle particular problems in software design.","types-of-design-patterns#Types of Design Patterns":"Creational\nStructural\nBehavioral"}},"/creational-patterns/simple-factory":{"title":"Simple Factory","data":{"":"Simple Factory is the way of creating objects to encapsulate the instantiation logic of entity. Client doesn't know the actual instantiation logic of entity.\nSimple Factory is the way of creating objects without exposing the object creation logic to the client.\nReal world example\nLet's consider, you want a Mac laptop. You simply can get one from a factory so you don't need to learn anything about making the laptop.\nExampleLaptop interface and the implementation\ninterface Laptop {\n  public int getScreenSize();\n}\nclass MacLaptop implements Laptop {\n  protected int screenSize;\n  public MacLaptop(int screenSize) {\n    this.screenSize = screenSize;\n  }\n  public int getScreenSize() {\n    return this.screenSize;\n  }\n}\nLaptop factory that make the laptop\nclass LaptopFactory {\n  public static Laptop makeLaptop(int screenSize) {\n    return new MacLaptop(screenSize);\n  }\n}\nIt can be used\n// Make me a 14 inch laptop\nLaptop macLaptop = LaptopFactory.makeLaptop(14);\nSystem.out.println(macLaptop.getScreenSize());"}}}